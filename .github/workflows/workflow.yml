# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Exemplar JS CI

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: "npm"
      - run: npm ci --no-scripts
      - run: npx lerna bootstrap
      - run: npx lerna run lint
      - run: npx lerna run build
      - uses: actions/upload-artifact@v3
        with:
          name: build-assets
          path: packages/tsc-only-node/build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: "npm"
      - run: npm ci --no-scripts
      - run: npx lerna bootstrap
      - uses: actions/download-artifact@v3
        with:
          name: build-assets
          path: packages/tsc-only-node/build
      - run: npx lerna run test:ci
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const {getCoverageString} = require('./packages/scripts/coverageUtils.cjs')
            
            const { issue: { number: issue_number }, repo: { owner, repo }, payload: { pull_request }  } = context;

            const compared = await github.rest.repos.compareCommits({
              base: pull_request.base.sha,
              head: pull_request.head.sha,
              owner,
              repo
            })
            
            const fileDiff = compared.data.files.map((file) => file.filename)
            const coverageString = getCoverageString(fileDiff)
            
            github.rest.issues.createComment({ issue_number, owner, repo, body: coverageString });
